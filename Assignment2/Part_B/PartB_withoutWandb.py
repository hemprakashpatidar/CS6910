# -*- coding: utf-8 -*-
"""PartB.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r-YPPayLi8lubzOluSv-SjqgNV_rEgC3
"""

import tensorflow as tf
import numpy as np
from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt
import keras
from wandb.keras import WandbCallback

from tensorflow.keras.applications.inception_v3 import InceptionV3
from tensorflow.keras.applications.resnet50 import ResNet50
from tensorflow.keras.applications.xception import Xception

from tensorflow.keras.preprocessing.image import ImageDataGenerator
 
train_generator = ImageDataGenerator(rescale=1./255,validation_split=0.1).flow_from_directory(
                                                    '/content/drive/MyDrive/Colab Notebooks/inaturalist_12K/train',
                                                     target_size=(224, 224),
                                                     batch_size=3000,
                                                     class_mode='binary',
                                                     subset='training',
                                                     seed=123)
val_generator = ImageDataGenerator(rescale=1./255,validation_split=0.1).flow_from_directory(
                                                    '/content/drive/MyDrive/Colab Notebooks/inaturalist_12K/train',
                                                     target_size=(224, 224),
                                                     batch_size=200,
                                                     class_mode='binary',
                                                     subset='validation',
                                                     seed=123)

train_generatori = ImageDataGenerator(rescale=1./255,validation_split=0.1).flow_from_directory(
                                                    '/content/drive/MyDrive/Colab Notebooks/inaturalist_12K/train',
                                                     target_size=(299, 299),
                                                     batch_size=3000,
                                                     class_mode='binary',
                                                     subset='training',
                                                     seed=123)

val_generatori = ImageDataGenerator(rescale=1./255,validation_split=0.1).flow_from_directory(
                                                    '/content/drive/MyDrive/Colab Notebooks/inaturalist_12K/train',
                                                     target_size=(299, 299),
                                                     batch_size=200,
                                                     class_mode='binary',
                                                     subset='validation',
                                                     seed=123)

X_traini, y_traini=next(train_generatori)
X_vali, y_vali = next(val_generatori)

X_train, y_train = next(train_generator)
X_val, y_val = next(val_generator)

from google.colab import drive
drive.mount('/content/drive')

bi

class MyCNNPre(object):
  def __init__(self,model_name):
     self.model_name=model_name

  def train(self):
    if(self.model_name=='ResNet50'):
      model_a = ResNet50(weights='imagenet')
      bi=model_a.layers[0].input
      bo=model_a.layers[-2].output
      fo=layers.Dense(10)(bo)
      model=keras.Model(inputs=bi,outputs=fo)
      opt = tf.keras.optimizers.Adam(learning_rate=0.0001)
      model.compile(optimizer=opt,
                loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
                metrics=['accuracy'])


      model.fit(X_train,y_train, epochs=10,validation_data=(X_val, y_val))
      
    if(self.model_name=='InceptionV3'):
      model_a = InceptionV3(weights='imagenet')
      bi=model_a.layers[0].input
      bo=model_a.layers[-2].output
      fo=layers.Dense(10)(bo)
      model=keras.Model(inputs=bi,outputs=fo)
      opt = tf.keras.optimizers.Adam(learning_rate=0.0001)
      model.compile(optimizer=opt,
                loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
                metrics=['accuracy'])


      model.fit(X_traini,y_traini, epochs=10,validation_data=(X_vali, y_vali))
    if(self.model_name=='Xception'):
      model_a = Xception(weights='imagenet')
      bi=model_a.layers[0].input
      bo=model_a.layers[-2].output
      fo=layers.Dense(10)(bo)
      model=keras.Model(inputs=bi,outputs=fo)
      opt = tf.keras.optimizers.Adam(learning_rate=0.0001)
      model.compile(optimizer=opt,
                loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
                metrics=['accuracy'])


      model.fit(X_traini,y_traini, epochs=10,validation_data=(X_vali, y_vali))

Modelname='InceptionV3'
modell = MyCNNPre(Modelname)
modell.train()

input_shape=(224,224,3)
fl=16
filt_fact=1
#Layer=[int(fl*(filt_fact**i)) for i in range(0,5)]
Layer=[16,256,32,16,128]
model =models.Sequential()
model.add(layers.Conv2D(Layer[0], (3, 3), input_shape=input_shape))
model.add(layers.Activation('relu'))
model.add(layers.MaxPooling2D(pool_size=(2, 2)))
model.add(layers.BatchNormalization())


model.add(layers.Conv2D(Layer[1], (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.BatchNormalization())


model.add(layers.Conv2D(Layer[2], (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.BatchNormalization())


model.add(layers.Conv2D(Layer[3], (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.BatchNormalization())


model.add(layers.Conv2D(Layer[4], (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((3, 3)))

model.add(layers.Flatten())
model.add(layers.Dense(128, activation='relu'))
model.add(layers.Dropout(0.3))

model.add(layers.Dense(10,activation='softmax'))

opt = tf.keras.optimizers.Adam(learning_rate=0.0001)
model.compile(optimizer=opt,
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])



train_test = ImageDataGenerator(rescale=1./255, rotation_range=40,
        width_shift_range=0.2,
        height_shift_range=0.2,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True,
        fill_mode='nearest').flow_from_directory(
                                                    '/content/drive/MyDrive/Colab Notebooks/inaturalist_12K/val',
                                                     target_size=(224, 224),
                                                     batch_size=1000,
                                                     class_mode='binary',
                                                     seed=12)



x_test,t_test=next(train_test)

history = model.fit(X_train, y_train, epochs=20,
                    
                    validation_data=(X_val, y_val))

model.evaluate(x_test,t_test)
